doctype html
html(lang='en')
    head
        meta(charset='UTF-8')
        title Form
        link(rel="stylesheet", href="https://unpkg.com/mocha/mocha.css")
        style.
            table {
                width: 100%;
            }
            td {
                border: 1px solid #000; 
                padding: 15px;
                text-align: left;
            }
            th {
                background-color: #04AA6D;
                color: white;import express from 'express';
            }
        script.
            function addToDiv(name){
                let p=document.createElement('p')
                p.innerText=name
                const responseDiv=document.querySelector('#responseDiv')
                responseDiv.appendChild(p)
            }

            function getTime(europe_city){
                return new Promise(async (resolve,reject)=>{
                    try{
                        const response=await fetch(`http://worldtimeapi.org/api/timezone/Europe/${europe_city}`, {
                            method: "GET",
                            headers: {
                                //****************************************************************************************
                                // What is the acceptable data type—the server part should return data of the given type
                                //****************************************************************************************
                                Accept: "application/json"
                            }
                        })
                        console.log(response)
                        if(response.status===200){
                            resolve(await response.json())
                        }else{
                            reject(await response.text())
                        } 
                    }catch(error){
                        reject(error);
                    }
                })
            }

            function putTimeToDiv(){
                let europe_city=document.querySelector("#cityInput").value
                console.log(europe_city)
                const responseDiv=document.querySelector('#responseDiv')
                getTime(europe_city)
                .then(res=>{
                    console.log(res)
                    let p=document.createElement('p')
                    p.innerText=JSON.stringify(res)
                    responseDiv.appendChild(p) 
                })
                .catch(err=>{
                    let p=document.createElement('p')
                    p.innerText=err
                    responseDiv.appendChild(p) 
                    //- window.alert(err)
                })
            }
            /**************************************************************************************/
            /* Function that retrieves the content of one of the selected text fields of the form */
            /**************************************************************************************/
            function getName(http_method){
                let name = '';

                // TODO: Here put the code that, depending on the value of the 'http_method' variable — GET / POST — assigns the 'name' variable to the value of the 'name_GET' / 'name_POST' form field
                if(http_method==='POST'){
                    name=document.querySelector("#name_POST").value
                }else if(http_method==='GET'){
                    name=document.querySelector("#name_GET").value
                }
                return name;
            }
            
            /**************************************************************************************/
            /* Function that performs (asynchronous) query to the web server using AJAX           */
            /**************************************************************************************/
            /* http_method ∈ ["GET", "POST"]                                                      */ 
            /* response_type ∈ ["text", "json", "document"]                                       */ 
            /* name - Contents of the form's text box - data that needs to be sent asynchronously */
            /**************************************************************************************/
            function requestAJAX(http_method, response_type, name, show_alert=false) {
                //-----------------------------------------------
                // Create an object representing the request to the web server — see https://developer.mozilla.org/docs/Web/API/XMLHttpRequest
                //-----------------------------------------------
                const xhr = new XMLHttpRequest();
                //-----------------------
                // Observers registration
                //-----------------------

                // If the request was successful
                xhr.addEventListener("load", function (evt) {                          
                    if (xhr.status === 200) {
                        console.group('AJAX');
                        console.log(`HTTP method ⟶\t\t${http_method}\nResponse type ⟶\t${response_type}\nInput data ⟶\t\t${name}`);
                        console.log(xhr.response);
                        console.groupEnd();
                        if(show_alert)
                            if(response_type==='json'){
                                addToDiv(JSON.stringify(xhr.response))
                                //- window.alert(JSON.stringify(xhr.response));
                            }else if(response_type==='document'){
                                //- window.alert(new XMLSerializer().serializeToString(xhr.response));
                                addToDiv(new XMLSerializer().serializeToString(xhr.response))
                            }else{
                                addToDiv(xhr.response)
                                //- window.alert(xhr.response)
                            }
                        else { 
                            results.set(`ajax ${http_method} ${response_type}`, xhr.response);
                            dispatchEvent(received); 
                        }
                    }
                });

                // If the request was failed
                xhr.addEventListener("error", function (evt) {
                    window.alert('There was a problem with this request.');
                });

                //--------------------------------------------------------------------------
                // Configuration and execution of the (asynchronous) query to the web server
                //--------------------------------------------------------------------------
                xhr.responseType = response_type;  // Type of data received by the 'load' observer

                if(http_method==="GET"){
                    xhr.open(http_method, `http://localhost:8000/submit?name=${encodeURIComponent(name)}`, true);
                }else if(http_method==="POST"){
                    xhr.open(http_method, 'http://localhost:8000/submit', true);
                    xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
                }
                

                //****************************************************************************************
                // What is the acceptable data type - the server part should return data of the given type
                // Default value: '*/*'
                //****************************************************************************************
                switch(response_type){
                    case 'json':
                        xhr.setRequestHeader('Accept', 'application/json');
                        break;
                    case 'document':
                        xhr.setRequestHeader('Accept', 'application/xml');
                        break;
                }

                if(http_method==="GET"){
                    xhr.send(null);
                }else if(http_method==="POST"){
                    xhr.send(`name=${encodeURIComponent(name)}`)
                }
              
            }

            /**************************************************************************************/
            /* Function that performs (asynchronous) query to the web server  usingFetch API      */
            /**************************************************************************************/
            /* http_method ∈ ["GET", "POST"]                                                      */ 
            /* response_type ∈ ["text", "json", "xml"]                                            */ 
            /* name - Contents of the form's text box - data that needs to be sent asynchronously */
            /**************************************************************************************/
            async function requestFetchAPI(http_method, response_type, name, show_alert=false) {
                let accept = '*/*';

                switch(response_type){
                    case 'json':
                        accept = 'application/json';
                        break;
                    case 'xml':
                        accept = 'application/xml';
                        break;
                }

                if(http_method==="GET"){
                    try{
                        const response=await fetch(`http://localhost:8000/submit?name=${encodeURIComponent(name)}`, {
                            method: http_method,
                            headers: {
                                //****************************************************************************************
                                // What is the acceptable data type—the server part should return data of the given type
                                //****************************************************************************************
                                Accept: accept
                            }
                        }) // Execution of the (asynchronous) query to the web server — a promise is created
                    
                        if (!response.ok)
                            throw Error(response.statusText);

                        console.group('Fetch API');
                        console.log(`HTTP method ⟶\t\t${http_method}\nResponse type ⟶\t${response_type}\nInput data ⟶\t\t${name}`);
                        let result;

                        if (!response.headers.get('content-type')?.includes('application/json')) {
                            // If the received data is plain text or an XML document
                            result = await response.text(); 
                        }
                        else {
                            //If the received data is a JSON document
                            result = await response.json();
                        }
                        console.log(result);
                        console.groupEnd();   
                        if(show_alert){
                            if(!response.headers.get('content-type')?.includes('application/json')){
                                addToDiv(result)
                                //- window.alert(res);  
                            }else{
                                addToDiv(JSON.stringify(result))
                                //- window.alert(JSON.stringify(res));  
                            }
                        }
                        else {
                            results.set(`fetch ${http_method} ${response_type}`, result);
                            //- result=`fetch ${http_method} ${response_type} ${res}` 
                            dispatchEvent(received);
                        }
                    }catch(error) { // if the promise is rejected
                        window.alert(error);
                    };
                }else if(http_method==="POST"){
                    const response=await fetch(`http://localhost:8000/submit`, {
                        method: http_method,
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            //****************************************************************************************
                            // What is the acceptable data type—the server part should return data of the given type
                            //****************************************************************************************
                            Accept: accept
                        },
                        body:`name=${encodeURIComponent(name)}`
                    }) // Execution of the (asynchronous) query to the web server — a promise is created
                    try{
                        if (!response.ok)
                            throw Error(response.statusText);

                        console.group('Fetch API');
                        console.log(`HTTP method ⟶\t\t${http_method}\nResponse type ⟶\t${response_type}\nInput data ⟶\t\t${name}`);
                        let result;

                        if (!response.headers.get('content-type')?.includes('application/json')) {
                            // If the received data is plain text or an XML document
                            result = await response.text(); 
                        }
                        else {
                            //If the received data is a JSON document
                            result = await response.json();
                        }

                        console.log(result);
                        console.groupEnd();   
                        if(show_alert){
                            if(!response.headers.get('content-type')?.includes('application/json')){
                                addToDiv(result)
                                //- window.alert(res);  
                            }else{
                                addToDiv(JSON.stringify(result))
                                //- window.alert(JSON.stringify(res));  
                            }
                        }
                        else {
                            results.set(`fetch ${http_method} ${response_type}`, result); 
                            dispatchEvent(received);
                        }
                    }catch(error) { // if the promise is rejected
                        window.alert(error);
                    };
                }
                
            }
        script(src="https://unpkg.com/chai/chai.js")
        script(src="https://unpkg.com/mocha/mocha.js") 
    body
        script(class="mocha-init").
            mocha.setup('bdd');
            mocha.checkLeaks(); 
        main
            table
                tr
                    th  
                    th GET
                    th POST
                tr 
                    th(colspan='3', style=' background-color: #04556D;') Without AJAX and Fetch API
                tr
                    th HTTP
                    td 
                        form(action="http://localhost:8000/submit", method="GET")
                            label(for="name_GET") Your name
                            input(type="text", id="name_GET", name="name")
                            br
                            input(type="submit", value="text")
                    td 
                        form(action="http://localhost:8000/submit", method="POST") 
                            label(for="name_POST") Your name
                            input(type="text", id="name_POST", name="name")
                            br
                            input(type="submit", value="text")
                tr 
                    th(colspan='3', style=' background-color: #04556D;')  Asynchronous requests
                tr 
                    th AJAX 
                    each method in ["GET", "POST"]
                        td
                            each type in ["text", "json", "document"]
                                
                                button(onclick=`console.clear() ; requestAJAX("${method}","${type}", getName('${method}'), true)`) #{type}
                tr
                    th Fetch API 
                    each method in ["GET", "POST"]
                        td
                            each type in ["text", "json", "xml"]
                                button(onclick=`console.clear() ; requestFetchAPI("${method}","${type}", getName('${method}'), true)`) #{type}
        input(id='cityInput' placeHolder="city")
        button(onclick='putTimeToDiv()') getTime
        div(id='responseDiv' style='padding-left:1rem;')
        h1 Unit tests
        button(onclick='window.location.reload();') Restart
        div(id="mocha")
        script.
            const name = 'John Doe ą/?:@&=+$#';
            
            if(window.location.port == 8000) { 
                window.addEventListener("load", (event) => {
                    for(let method of ["GET","POST"]){
                        for(let type of ["text", "json", "document"])
                            requestAJAX(method, type, name);                        
                        for(let type of ["text", "json", "xml"])
                            requestFetchAPI(method, type, name);
                    }
                })
            };
        script(class="mocha-exec").
            //****************************************************************************************
            // Unit tests
            //****************************************************************************************
            var results = new Map();
            var received = new Event('received');
            var test_executed = false;

            function decodeHtml(html) {
                var txt = document.createElement("textarea");
                txt.innerHTML = html;

                return txt.value;
            }

            addEventListener('received', (e) => {
                if(!test_executed && results.size === 12){
                    const expect = chai.expect; 
                    const parser = new DOMParser();
                    const xml_document= parser.parseFromString("<welcome>Hello 'John Doe ą/?:@&amp;=+$#'</welcome>","text/xml");

                    describe('AJAX requests', function() {
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','text')`, function() {
                            expect(results.get('ajax GET text')).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','json')`, function() {
                            expect(results.get('ajax GET json')).to.eql({welcome: `Hello '${name}'`});
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','document')`, function() {
                            expect(results.get('ajax GET document').documentElement.firstChild.data).to.equal(xml_document.documentElement.firstChild.data);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','text')`, function() {
                            expect(results.get('ajax POST text')).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','json')`, function() {
                            expect(results.get('ajax POST json')).to.eql({welcome: `Hello '${name}'`});
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','document')`, function() {
                            expect(results.get('ajax POST document').documentElement.firstChild.data).to.equal(xml_document.documentElement.firstChild.data);
                        });
                    });
            
                    describe('Fetch API requests', function() {   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','text')`, async function() {
                            const result  = await results.get('fetch GET text')
                            expect(result).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','json')`, async function() {
                            const result  = await results.get('fetch GET json')
                            expect(result).to.eql({welcome: `Hello '${name}'`});
                        });   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','xml')`, async function() {
                            const result  = await results.get('fetch GET xml');
                            expect(decodeHtml(result)).to.equal(`<welcome>Hello '${name}'</welcome>`);
                        }); 
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','text')`, async function() {
                            const result  = await results.get('fetch POST text')
                            expect(result).to.equal(`Hello '${name}'`);                   
                        });
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','json')`, async function() {
                            const result  = await results.get('fetch POST json')
                            expect(result).to.eql({welcome: `Hello '${name}'`});
                        });   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','xml')`, async function() {
                            const result  = await results.get('fetch POST xml');
                            expect(decodeHtml(result)).to.equal(`<welcome>Hello '${name}'</welcome>`);
                        });    
                    });     
                    
                    mocha.run();
                    test_executed = true;
                }
            });